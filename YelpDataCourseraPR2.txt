Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table =10000
iv. Checkin table = 10000 
v. elite_years table = 10000
vi. friend table = 10000 
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (id)
ii. Hours = 1562 (business_id)
iii. Category = 2643 (business_id)
iv. Attribute = 1115 (business_id)
v. Review = 10000 (id), 8090 (business_id), 9581 (user_id)
vi. Checkin = 493 (business_id)
vii. Photo = 10000 (id), 6493 (business_id)
viii. Tip = 537 (user_id), 3979 (business_id)
ix. User = 10000 (id)
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No.
	
	
	SQL code used to arrive at answer:

        SELECT COUNT(*)
        FROM user
        WHERE id IS NULL OR 
              name IS NULL OR 
              review_count IS NULL OR 
              yelping_since IS NULL OR
              useful IS NULL OR 
              funny IS NULL OR 
              cool IS NULL OR 
              fans IS NULL OR 
              average_stars IS NULL OR 
              compliment_hot IS NULL OR 
              compliment_more IS NULL OR 
              compliment_profile IS NULL OR 
              compliment_cute IS NULL OR 
              compliment_list IS NULL OR 
              compliment_note IS NULL OR 
              compliment_plain IS NULL OR 
              compliment_cool IS NULL OR 
              compliment_funny IS NULL OR 
              compliment_writer IS NULL OR 
              compliment_photos IS NULL	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5  	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

            SELECT city,
                   SUM(review_count) AS Total_Reviews
            FROM business
            GROUP BY city
            ORDER BY Total_Reviews DESC
	
	
	Copy and Paste the Result Below:
	
+-----------------+---------------+
| city            | Total_Reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

            SELECT stars,
                   SUM(review_count) AS Total_Stars
            FROM business
            WHERE city == 'Avon'
            GROUP BY stars DESC
            ORDER BY stars DESC


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
        
+-------+-------------+
| stars | Total_Stars |
+-------+-------------+
|   5.0 |           3 |
|   4.5 |          31 |
|   4.0 |          21 |
|   3.5 |          88 |
|   2.5 |           6 |
|   1.5 |          10 |
+-------+-------------+

ii. Beachwood

SQL code used to arrive at answer:

            SELECT stars,
                   SUM(review_count) AS Total_Stars
            FROM business
            WHERE city == 'Beachwood'
            GROUP BY stars
            ORDER BY stars DESC


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+-------------+
| stars | Total_Stars |
+-------+-------------+
|   5.0 |          23 |
|   4.5 |          17 |
|   4.0 |          69 |
|   3.5 |           6 |
|   3.0 |          11 |
|   2.5 |           3 |
|   2.0 |           8 |
+-------+-------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

            SELECT id,
                   name,
                   review_count
            FROM user
            ORDER BY review_count DESC LIMIT 3
		
	Copy and Paste the Result Below:

            +------------------------+--------+--------------+
            | id                     | name   | review_count |
            +------------------------+--------+--------------+
            | -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
            | -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
            | -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
            +------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
            By using the code

                    SELECT id,
                           name,
                           review_count,
                           fans
                    FROM user
                    ORDER BY fans DESC LIMIT 10

            that gives us the following table:

                    +------------------------+-----------+--------------+------+
                    | id                     | name      | review_count | fans |
                    +------------------------+-----------+--------------+------+
                    | -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 |
                    | -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
                    | --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
                    | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
                    | -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
                    | -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
                    | -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 |
                    | -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
                    | -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
                    | -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
                    +------------------------+-----------+--------------+------+

            we can see that there is not correlation between the number of fans and the number of reviews posted.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love: 1780 reviews
            Hate: 232 reviews
            So, there are more reviews with the word "love" in them.

	
	SQL code used to arrive at answer:

            SELECT COUNT(text)
            FROM review
            WHERE text LIKE '%love%';

            SELECT COUNT(text)
            FROM review
            WHERE text LIKE '%hate%'

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	           
            SELECT id,
                   name,
                   fans
            FROM user
            ORDER BY fans DESC LIMIT 10
	
	Copy and Paste the Result Below:

	    +------------------------+-----------+------+
        | id                     | name      | fans |
        +------------------------+-----------+------+
        | -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
        | -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
        | --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
        | -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
        | -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
        | -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
        | -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
        | -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
        | -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
        | -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
        +------------------------+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
        
    The categories choosen to be analyzed were 'Shopping' and 'Food' and the city 'Toronto'. Both have a similar distribution of hours.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
    The review count for both categories are also similar.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

    The address location is not relevant for analysis, since there is not correlation between address and any other column used for analysis.

SQL code used for analysis:

		SELECT b.name,
               c.category,
               b.stars,
               b.review_count,
               h.hours,
               b.address
        FROM business b INNER JOIN hours h
               ON b.id = h.business_id
               INNER JOIN category c
               ON c.business_id = b.id
        WHERE (b.city == 'Toronto') AND (c.category = 'Shopping' OR c.category = 'Food')
        GROUP BY h.hours
        ORDER BY b.stars, h.hours DESC
        		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
         Different types of business are open at different hours of the day, based on their categories.

ii. Difference 2:
         
         The city the business is based also influences the hours that the business is open.
         
SQL code used for analysis:
        
            SELECT b.name,
                   c.category,
                   b.city,
                   b.stars,
                   b.is_open
            FROM business b INNER JOIN category c
                   ON b.id = c.business_id
            	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

User analysis to see if the number of fans a user has is influenced by any aspect of the user status.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

The data used will be the id and name, to better identify a user; the review count, to check if the user is really active on the platform; the useful, funny and cool variables; the amount of fans and the average stars. All of these are used to check if there exists a correlations between any two variables.    
                  
iii. Output of your finished dataset:
    
+------------------------+-----------+--------------+--------+--------+--------+------+---------------+
| id                     | name      | review_count | useful |  funny |   cool | fans | average_stars |
+------------------------+-----------+--------------+--------+--------+--------+------+---------------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |   3226 |   2554 |   2751 |  503 |          3.21 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |    257 |    138 |    159 |  497 |          4.05 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 | 122921 | 122419 | 122890 |  311 |           4.4 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  17524 |   2324 |  15008 |  253 |           3.6 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |   4834 |   6646 |   4321 |  173 |          3.69 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |     48 |     13 |      6 |  159 |          4.09 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |   1062 |    672 |   1076 |  133 |          3.99 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |   9363 |   9361 |   9370 |  126 |          4.41 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |   9851 |   7606 |   9344 |  124 |           4.1 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |    455 |    150 |    342 |  120 |          3.68 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |   4008 |    570 |   2765 |  115 |          3.36 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |   1366 |    984 |   1279 |  111 |          4.09 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |    120 |    112 |    109 |  105 |          3.95 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |   2995 |   1188 |    636 |  104 |          3.71 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |    158 |    164 |    105 |  101 |          3.89 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |   7850 |   5851 |   5104 |  101 |          3.14 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   1180 |   1155 |   1143 |   96 |           3.7 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   3177 |   2736 |   3019 |   89 |          4.06 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |    158 |     34 |    102 |   85 |           4.1 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   2161 |   2091 |   2067 |   84 |           4.1 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |    820 |    753 |    746 |   81 |          3.67 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   1091 |    774 |    940 |   80 |          3.64 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |      9 |     18 |      2 |   78 |          3.62 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   1166 |    220 |    561 |   76 |          4.11 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |     13 |     10 |      6 |   73 |          3.87 |
+------------------------+-----------+--------------+--------+--------+--------+------+---------------+
(Output limit exceeded, 25 of 10000 total rows shown)
         
iv. Provide the SQL code you used to create your final dataset:

    SELECT id,
           name,
           review_count,
           useful, funny,
           cool,
           fans,
           average_stars
    FROM user
    ORDER BY fans DESC